@{
    ViewData["Title"] = "Home Page";
}

<style>
    #treeContainer ul {
    list-style: none;
    }

    #treeContainer li::before {
        content: "+";
        margin-right: 5px;
        font-size: 20px;
        cursor: pointer;
    }

    #treeContainer li[aria-expanded='true']::before {
        content: "-";
    }
</style>

<div class="text-center">
    <h1 class="display-4">Territory Directory</h1>
    <p>Learn about the different territories in the PH.</p>
</div>

<div id="treeContainer"></div>

<script>
    var data = @Html.Raw(ViewData["territories"]);;        
    
    // Create the tree structures from the data
    var treeData = createTree(data.data, container);
    // Get the treeContainer where the tree will be put
    var container = document.getElementById("treeContainer");
    // Generate the trees on the container
    treeData.forEach(tree => {
        // Render the tree
        renderTree(tree, container);
    })
    
    function createTree(data, container) {
        // Create a map of all nodes, keyed by their id
        var nodes = {};
        // Get all parent nodes index from data
        var parentNodeIndexes = [];
        for (var i = 0; i < data.length; i++) {
            if (!data[i].parent) {
                parentNodeIndexes.push(i);
            }
            var node = data[i];
            nodes[node.id] = node;
            node.children = [];
        }
        // Add children to nodes based on their parent id
        for (var i = 0; i < data.length; i++) {
            var node = data[i];
                if (node.parent) {
                    nodes[node.parent].children.push(node);
                } 
        }
        // Get the parent nodes from the dictionary
        var parentNodes = [];
        parentNodeIndexes.forEach(parent => {
            parentNodes.push(nodes[data[parent].id]);
        });
        return parentNodes;
    }

    function renderTree(data, container) {
        var ul = document.createElement('ul');
        var li = document.createElement('li');
        li.innerHTML = data.name;
        ul.appendChild(li);
        container.appendChild(ul);
        // Check if there are children node
        if (data.children) {
            // If present, recursively call the function to render the child nodes
            for (var i = 0; i < data.children.length; i++) {
                renderTree(data.children[i], ul);
            }
        }
    }
</script>